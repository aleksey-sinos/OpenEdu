%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Неделя 9.
%% Фильтрация случайных последовательностей.
%% Дискретный фильтр Калмана.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear; %close all;
%% Параметры  %%

mn = 100; %Количество измерений

%% Моделирование измерений для самолета %%
dt = 1;             %Интервал дискретизации
x_0 = [5000;0];     %Начальное значение
P_0 = [10+randn 0;       %Начальная матрица ковариаций
        0 1+0.2*randn];
F = [1 dt;          %Матрица динамики
     0 1];
G = [0; 0.5+0.1*randn];       %Матрица порождающих шумов

Q = 1;              %Матрица ковариаций порождающий шумов
R = (1+0.3*rand)^2;            %Матрица ковариаций шумов измерений

%Выделение памяти
x = zeros(2,mn); 
y = zeros(1,mn-1); 
P = zeros(2,2,mn); P(:,:,1) = P_0;


x(:,1) = x_0+sqrt(P_0)*randn(2,1); %Генерация случайного начального значения
for i = 2:mn
   x(:,i) =F*x(:,i-1)+G*randn;
   y(i-1) = x(1,i)+sqrt(R)*randn;
   P(:,:,i) = F*P(:,:,i-1)*F'+G*Q*G';
end

%% Оценивание высоты %%
H = [1 0];          %Матрица наблюдения

%Выделение памяти
x_est = zeros(2,mn); 
z = zeros(1,mn-1);
P_est = zeros(2,2,mn);
P_pr = zeros(2,2,mn);

%Инициализация алгоритма
x_est(:,1) = x_0;  
P_est(:,:,1) = P_0; %Начальная матрица ковариаций


%ФК
for i = 2:mn
    P_pr(:,:,i) = F*P_est(:,:,i-1)*F' + G*Q*G'; % Матрица ковариаций прогноза
    P_est(:,:,i) = (P_pr(:,:,i)^-1 + H'*(R^-1)*H)^-1; % Матрица ковариаций оценки
    K = P_est(:,:,i)*H'*R^-1; % Коэфициент усиления

    x_est(:,i) = F*x_est(:,i-1) + K*(y(i-1) - H*F*x_est(:,i-1)); % Оценка
    z(i-1) = H*x_est(:,i);
end

%Действительные ошибки оценивания
h_est_err = x_est(1,:)-x(1,:);
V_est_err = x_est(2,:)-x(2,:);

%% Графики %%
figure(1); clf;
title('Истинное значение, измерения и оценка высоты')
hold on; grid on;
plot(1:mn,x(1,:),'b');
plot(2:mn,y,'*');
plot(2:mn,z);
xlabel('Время (c)'); ylabel('Высота (м)');
legend('Истинная траектория','Измерения','Оценка');

figure(2); clf;

subplot(1,2,1); hold on; grid; title('СКО вертикальной скорости')
plot(1:mn,3*sqrt(squeeze(P_est(2,2,:))),'r');
plot(1:mn,V_est_err,'g')
plot(1:mn,-3*sqrt(squeeze(P_est(2,2,:))),'r');
ylabel('СКО (м/с)');
legend('3\sigma оценки','Действительная ошибка');

subplot(1,2,2); hold on; grid; title('СКО высоты')
h(1) = plot(1:mn,3*sqrt(squeeze(P_est(1,1,:))),'r');
plot(1:mn,-3*sqrt(squeeze(P_est(1,1,:))),'r');
h(2) = plot(1:mn,3*sqrt(R)*ones(1,mn),'b');
plot(1:mn,-3*sqrt(R)*ones(1,mn),'b');
h(3) = plot(1:mn,h_est_err,'g');
ylabel('СКО (м)');
legend(h(:),'3\sigma оценки','3\sigma измерений','Действительная ошибка');

fprintf('Отношение СКО погрешности оценивания \nк СКО погрешности измерений: %f / %f = %f \n',sqrt(P_est(1,1,end)),sqrt(R),sqrt(P_est(1,1,end))/sqrt(R));

% %% Запись данных %%
% data = [y_sns, y_ba];
% answer = [x_est(1,end); x_est(2,end); 3*h_f_sko(20); 3*v_b_sko(20)];
% fillings = [h0_var; V_var; SNS_var; BA_var];
% 
% save('data7.txt','data','-ascii');
% save('answer7.txt','answer','-ascii');
% save('fillings7.txt','fillings','-ascii');
